const { ActivityHandler, MessageFactory, UserState, MemoryStorage } = require('botbuilder');
const { OpenAIClient, AzureKeyCredential } = require("@azure/openai");

// We'll use MemoryStorage for this example, but you would likely use BlobStorage or CosmosDbPartitionedStorage in production
const memoryStorage = new MemoryStorage();
const userState = new UserState(memoryStorage);
// Define the state property accessor keys
const CHAT_MESSAGES_KEY = 'CHAT_MESSAGES_KEY';

class EchoBot extends ActivityHandler {
    constructor() {
        super();
        this.chatMessagesAccessor = userState.createProperty(CHAT_MESSAGES_KEY);

        this.onMessage(async (context, next) => {
            let chatText = context.activity.text;
            let chatHistory = await this.chatMessagesAccessor.get(context, []);
            chatHistory.push(chatText);

            const response = await chatCompletion(chatText, chatHistory);
            const replyText = `GPT-3.5: ${response}`;
            await context.sendActivity(MessageFactory.text(replyText, replyText));
            
            chatHistory.push(response);
            this.chatMessagesAccessor.set(context, chatHistory);
            
            await next();
        });

        this.onMembersAdded(async (context, next) => {
            const membersAdded = context.activity.membersAdded;
            for (let cnt = 0; cnt < membersAdded.length; ++cnt) {
                if (membersAdded[cnt].id !== context.activity.recipient.id) {
                    await context.sendActivity(MessageFactory.text('Hello and welcome to our bot!'));
                }
            }
            await next();
        });
    }

    async run(context) {
        await super.run(context);
        await userState.saveChanges(context, false);
    }
}

async function chatCompletion(chatText, chatHistory){
    const endpoint = process.env.OPENAI_API_BASE_URL;
    const client = new OpenAIClient(endpoint, new AzureKeyCredential(process.env.OPENAI_API_KEY));
    const deploymentId = process.env.OPENAI_API_DEPLOYMENT;
    const messages = [
        { role: "system", content: "You are a helpful assistant. You will talk like a cat." },
        ...chatHistory.map(text => { role: 'user', content: text })
    ];
    console.log(`Sending request to OpenAI API with the following parameters:
    Endpoint: ${endpoint}
    Deployment Id: ${deploymentId}
    Messages: ${JSON.stringify(messages)}
  `);

  try {
    const result = await client.getChatCompletions(deploymentId, messages, { maxTokens: 128 });

    console.log(`Received response from OpenAI API: ${JSON.stringify(result)}`);
  
    return result.choices[0].message.content;
  } catch (error) {
    console.error("An error occurred while interacting with OpenAI API", error);
    throw error;
  }
}

class EchoBot extends ActivityHandler {
    constructor() {
        super();
        // See https://aka.ms/about-bot-activity-message to learn more about the message and other activity types.
        this.onMessage(async (context, next) => {
            const response = await chatCompletion(context.activity.text);
            const replyText = `GPT 3.5: ${response}`;
            await context.sendActivity(MessageFactory.text(replyText, replyText));
            // By calling next() you ensure that the next BotHandler is run.
            await next();
        });

        this.onMembersAdded(async (context, next) => {
            const membersAdded = context.activity.membersAdded;
            const welcomeText = 'Hello and welcome to the at>ESS Chat bot!';
            for (let cnt = 0; cnt < membersAdded.length; ++cnt) {
                if (membersAdded[cnt].id !== context.activity.recipient.id) {
                    await context.sendActivity(MessageFactory.text(welcomeText, welcomeText));
                }
            }
            // By calling next() you ensure that the next BotHandler is run.
            await next();
        });
    }
}

module.exports.EchoBot = EchoBot;